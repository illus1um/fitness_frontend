import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fitness_app/services/api_service.dart';

class WorkoutScreen extends StatefulWidget {
  @override
  _WorkoutScreenState createState() => _WorkoutScreenState();
}

class _WorkoutScreenState extends State<WorkoutScreen> {
  Map<String, dynamic>? userData;
  List<Map<String, dynamic>> workoutExercises = [];

  @override
  void initState() {
    super.initState();
    loadUserData();
  }

  /// üìå **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è**
  void loadUserData() async {
    var data = await ApiService.getUserProfile();

    if (data != null) {
      print("üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: $data");
      setState(() {
        userData = data;
      });
      await loadExercises();
    } else {
      print("üî∫ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è");
    }
  }

  /// üìå **–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π**
  Future<void> loadExercises() async {
    String jsonString = await rootBundle.loadString('assets/ideal.json');
    List<dynamic> jsonList = json.decode(jsonString);

    List<Map<String, dynamic>> filteredExercises = [];

    if (userData != null) {
      String goal = userData!["training_program"];
      String location = userData!["training_location"];
      String experience = userData!["training_experience"];

      print("üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è: $goal, $location, $experience");

      for (var exercise in jsonList) {
        if (exercise["Training Program"] == goal &&
            exercise["Training Location"] == location &&
            exercise["Training Experience"] == experience) {
          
          String gifUrl = exercise["GIF URL"];
          String gifFileName = gifUrl.split('/').last; // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–º—è —Ñ–∞–π–ª–∞

          // üî• –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
          if (!gifFileName.endsWith(".gif")) {
            gifFileName = "$gifFileName.gif";
          }

          String previewFileName = gifFileName.replaceAll('.gif', '.png'); // –î–µ–ª–∞–µ–º –ø—Ä–µ–≤—å—é

          // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏
          String gifPath = "assets/gifs/$gifFileName";
          String previewPath = "assets/gifs/$previewFileName";

          filteredExercises.add({
            "name": exercise["Exercise Name"],
            "bodyPart": exercise["Body Part"],
            "target": exercise["Target Muscle"],
            "equipment": exercise["Equipment"],
            "gif": gifPath, // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–∏—Ñ–∫—É
            "preview": previewPath, // üîπ –ü—Ä–µ–≤—å—é –¥–ª—è —Å–ø–∏—Å–∫–∞
            "instructions": exercise["Instructions"] ?? [],
          });
        }
      }
    }

    setState(() {
      workoutExercises = filteredExercises;
    });

    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ ${workoutExercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.");
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Workout Plan"),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
        scrolledUnderElevation: 0, 
      ),
      body: userData == null
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildInfoCard(),
                    SizedBox(height: 20),
                    Text("Recommended Exercises", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Color.fromARGB(255, 199, 169, 127))),
                    SizedBox(height: 10),
                    workoutExercises.isEmpty
                        ? Center(child: Text("No exercises found for your selection."))
                        : ListView.builder(
                            shrinkWrap: true,
                            physics: NeverScrollableScrollPhysics(),
                            itemCount: workoutExercises.length,
                            itemBuilder: (context, index) {
                              var exercise = workoutExercises[index];
                              return _buildExerciseTile(exercise);
                            },
                          ),
                  ],
                ),
              ),
            ),
    );
  }

  /// üìå **–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**
  Widget _buildInfoCard() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 6,
            spreadRadius: 2,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildInfoTile(Icons.flag, "Goal", userData?["training_program"] ?? "Not selected"),
          _buildInfoTile(Icons.location_on, "Location", userData?["training_location"] ?? "Not selected"),
          _buildInfoTile(Icons.emoji_events, "Experience", userData?["training_experience"] ?? "Not selected"),
        ],
      ),
    );
  }

  /// üìå **–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**
  Widget _buildInfoTile(IconData icon, String title, String value) {
    return ListTile(
      leading: Icon(icon, color: Colors.black87),
      title: Text(title, style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
      subtitle: Text(value, style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600, color: Colors.black54)),
      contentPadding: EdgeInsets.symmetric(vertical: 4),
    );
  }

  /// üìå **–ö–∞—Ä—Ç–æ—á–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π**
  Widget _buildExerciseTile(Map<String, dynamic> exercise) {
    return Card(
      color: Colors.white, 
      margin: EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: ListTile(
        leading: Image.asset(
          exercise["preview"],
          width: 60,
          height: 60,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) {
            print("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: ${exercise["preview"]}");
            return Icon(Icons.image_not_supported, size: 60, color: Colors.grey);
          },
        ),

        title: Text(
          exercise["name"],
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
        subtitle: Text(
          "Target: ${exercise["target"]}\nEquipment: ${exercise["equipment"]}",
          style: TextStyle(fontSize: 14, color: Colors.black54),
        ),
        trailing: Icon(Icons.chevron_right),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => ExerciseDetailScreen(exercise)),
          );
        },
      ),
    );
  }
}

class ExerciseDetailScreen extends StatefulWidget {
  final Map<String, dynamic> exercise;

  ExerciseDetailScreen(this.exercise);

  @override
  _ExerciseDetailScreenState createState() => _ExerciseDetailScreenState();
}

class _ExerciseDetailScreenState extends State<ExerciseDetailScreen> {
  List<dynamic>? instructions;

  @override
  void initState() {
    super.initState();
    loadInstructions();
  }

  /// üìå **–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ `exercises.json`**
  Future<void> loadInstructions() async {
    try {
      String jsonString = await rootBundle.loadString('assets/exercises.json');
      List<dynamic> exercisesList = json.decode(jsonString);

      // üîπ –ò—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      var matchedExercise = exercisesList.firstWhere(
        (ex) => ex["name"].toLowerCase() == widget.exercise["name"].toLowerCase(),
        orElse: () => {},
      );

      setState(() {
        instructions = matchedExercise.isNotEmpty ? matchedExercise["instructions"] : [];
      });

      print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${instructions?.length} —à–∞–≥–æ–≤");
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: $e");
      setState(() {
        instructions = [];
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.exercise["name"] ?? "Exercise"),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      body: SingleChildScrollView( // ‚úÖ –î–µ–ª–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–º
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // üîπ GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              Center(
                child: Image.asset(
                  widget.exercise["gif"] ?? "assets/images/placeholder.png",
                  height: 350,
                  fit: BoxFit.contain,
                  errorBuilder: (context, error, stackTrace) {
                    print("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∏—Ñ–∫–∏: ${widget.exercise["gif"]}");
                    return Icon(Icons.image_not_supported, size: 100, color: Colors.grey);
                  },
                ),
              ),
              SizedBox(height: 20),

              // üîπ –ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
              Text(
                widget.exercise["name"] ?? "Unknown Exercise",
                style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),

              // üîπ –û—Å–Ω–æ–≤–Ω–∞—è –º—ã—à—Ü–∞
              Row(
                children: [
                  Icon(Icons.fitness_center, color: Colors.black54),
                  SizedBox(width: 8),
                  Text("Target: "),
                  Text(
                    widget.exercise["target"] ?? "Unknown",
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.w800),
                  ),
                ],
              ),
              SizedBox(height: 20),

              // üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
              Text(
                "Instructions",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),

              // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
              if (instructions != null && instructions!.isNotEmpty)
                ListView.builder(
                  shrinkWrap: true, // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                  physics: NeverScrollableScrollPhysics(), // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Å–∫—Ä–æ–ª–ª
                  itemCount: instructions!.length,
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 10.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // üîπ –ö—Ä—É–∂–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —à–∞–≥–∞
                          Container(
                            width: 30,
                            height: 30,
                            decoration: BoxDecoration(
                              color: Color.fromARGB(255, 199, 169, 127),
                              shape: BoxShape.circle,
                            ),
                            child: Center(
                              child: Text(
                                "${index + 1}",
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          ),
                          SizedBox(width: 12),

                          // üîπ –¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                          Expanded(
                            child: Text(
                              instructions![index],
                              style: TextStyle(fontSize: 16, color: Colors.black87),
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                )
              else
                Center(
                  child: Text(
                    "Instructions not available.",
                    style: TextStyle(fontSize: 16, fontStyle: FontStyle.italic, color: Colors.grey),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}